;;; Morse Code blinker

;; Letters to morse codes.
(def codes
  '((a . (dot dash))
    (b . (dash dot dot dot))
    (c . (dash dot dash dot))
    (d . (dash dot dot))
    (e . (dot))
    (f . (dot dot dash dot))
    (g . (dash dash dot))
    (h . (dot dot dot dot))
    (i . (dot dot))
    (j . (dot dash dash dash))
    (k . (dash dot dash))
    (l . (dot dash dot dot))
    (m . (dash dash))
    (n . (dash dot))
    (o . (dash dash dash))
    (p . (dot dash dash dot))
    (q . (dash dash dot dash))
    (r . (dot dash dot))
    (s . (dot dot dot))
    (t . (dash))
    (u . (dot dot dash))
    (v . (dot dot dot dash))
    (w . (dot dash dash))
    (x . (dash dot dot dash))
    (y . (dash dot dash dash))
    (z . (dash dash dot dot))))

;; Blink and sleep times, in milliseconds.
(def times
  '((dot  . 200)
    (dash . 600)
    (wait . 600)))

;; Find value for key k in association list alst or NIL if not found.
(def find
  (fn (alst k)
    (loop (lst alst)
      (let (pair (car lst))
        (when pair
          (if (= (car pair) k)
            (cdr pair)
            (recur (cdr lst))))))))

;; Turn on the LED for ms milliseconds.
(def led
  (fn (ms)
    (sreg _ddrb 255)
    (sreg _portb 255)
    (slp ms)
    (sreg _portb 0)))

;; Blink out msg, a list of symbols, in Morse Code.
(def morse
  (fn (msg)
    (loop (m msg)
      (when (car m)
        (loop (patt (find codes (car m)))
          (when (car patt)
            (led (find times (car patt)))
            (recur (cdr patt))))
        (slp (find times 'wait))
        (recur (cdr m))))))

;;; (morse '(S O S))